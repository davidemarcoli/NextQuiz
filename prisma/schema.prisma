// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
  Skill         Skill[]
  LearnedWord   LearnedWord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuizWord {
  id          String        @id @default(cuid())
  term        String
  definition  String
  quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId      String
  Skill       Skill[]
  LearnedWord LearnedWord[]
}

model Quiz {
  id     String     @id @default(cuid())
  name   String
  words  QuizWord[]
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Skill {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  quizWord    QuizWord @relation(fields: [quizWordId], references: [id], onDelete: Cascade)
  quizWordId  String
  proficiency Int
}

model LearnedWord {
  id         String   @id @default(cuid())
  learned    Boolean
  userId     String
  quizWordId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizWord   QuizWord @relation(fields: [quizWordId], references: [id], onDelete: Cascade)

  @@index([userId, quizWordId])
}
